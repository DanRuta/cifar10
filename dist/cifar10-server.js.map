{"version":3,"sources":["../dev/cifar10-server.js"],"names":["http","require","url","fs","cifar10","dataPath","createServer","request","response","path","parse","pathname","jsonData","data","on","chunk","console","log","length","JSON","dataCount","set","training","test","stringify","category","range","start","end","stack","reset","indexList","get","count","readFileSync","__dirname","e","listen"],"mappings":"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","file":"cifar10-server.js","sourcesContent":["\"use strict\"\r\n\r\nconst http = require(\"http\")\r\nconst url = require(\"url\")\r\nconst fs = require(\"fs\")\r\nconst cifar10 = require(\"./cifar10\")({dataPath: \"../data\"})\r\n\r\nhttp.createServer((request, response) => {\r\n\r\n    let path = url.parse(request.url).pathname\r\n    let jsonData = \"\"\r\n    let data = \"\"\r\n    path = path==\"/\" ? \"index.html\" : path\r\n\r\n    request.on(\"data\", chunk => jsonData += chunk)\r\n    request.on(\"end\", async () => {\r\n\r\n        console.log(path)\r\n\r\n        jsonData = jsonData.length ? JSON.parse(jsonData) : jsonData\r\n\r\n        switch(path) {\r\n\r\n            case \"/set\":\r\n                const dataCount = cifar10.set(jsonData.training, jsonData.test)\r\n                data = JSON.stringify({dataCount})\r\n                break\r\n\r\n            case \"/range\": \r\n                try {\r\n                    data = await cifar10[jsonData.category].range(jsonData.start, jsonData.end)  \r\n                    data = JSON.stringify(data)\r\n                } catch (e) {console.log(e.stack)}\r\n                break\r\n\r\n            case \"/reset\": \r\n                cifar10.reset()\r\n                break\r\n\r\n            case \"/training.get\":\r\n                try {\r\n                    if (jsonData.indexList) {\r\n                        data = await cifar10.training.get(jsonData.indexList)\r\n                    } else {\r\n                        data = await cifar10.training.get(jsonData.count)\r\n                    }\r\n                    data = JSON.stringify(data)\r\n                } catch (e) {console.log(e.stack)}\r\n                break\r\n\r\n            case \"/test.get\":\r\n                try {\r\n                    if (jsonData.indexList) {\r\n                        data = await cifar10.test.get(jsonData.indexList)\r\n                    } else {\r\n                        data = await cifar10.test.get(jsonData.count)\r\n                    }\r\n                    data = JSON.stringify(data)\r\n                } catch (e) {console.log(e.stack)}\r\n                break\r\n\r\n            case \"/training.length\":\r\n                data = JSON.stringify({length: cifar10.training.length})\r\n                break\r\n\r\n            case \"/test.length\":\r\n                data = JSON.stringify({length: cifar10.test.length})\r\n                break\r\n\r\n            case \"/category.training.get\":\r\n                try {\r\n                    if (jsonData.indexList) {\r\n                        data = await cifar10[jsonData.category].training.get(jsonData.indexList)\r\n                    } else {\r\n                        data = await cifar10[jsonData.category].training.get(jsonData.count)\r\n                    }\r\n                    data = JSON.stringify(data)\r\n\r\n                } catch (e) {console.log(e.stack)}\r\n                break\r\n\r\n            case \"/category.test.get\":\r\n                try {\r\n                    if (jsonData.indexList) {\r\n                        data = await cifar10[jsonData.category].test.get(jsonData.indexList)\r\n                    } else {\r\n                        data = await cifar10[jsonData.category].test.get(jsonData.count)\r\n                    }\r\n                    data = JSON.stringify(data)\r\n\r\n                } catch (e) {console.log(e.stack)}\r\n                break\r\n\r\n            case \"/category.training.length\":\r\n                data = JSON.stringify({length: cifar10[jsonData.category].training.length})\r\n                break\r\n\r\n            case \"/category.test.length\":\r\n                data = JSON.stringify({length: cifar10[jsonData.category].test.length})\r\n                break\r\n\r\n            default:\r\n                try {\r\n                    data = fs.readFileSync(__dirname+\"/\"+path)\r\n                } catch(e) {}\r\n\r\n        }\r\n\r\n        response.end(data)\r\n    })\r\n\r\n}).listen(1337, () => console.log(\"Listening on port 1337\"))"]}