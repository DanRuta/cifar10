{"version":3,"sources":["../dev/cifar10-client.js"],"names":["CIFAR10","training","test","fetch","method","body","JSON","stringify","then","r","json","dataCount","console","warn","data","context","inputData","input","map","v","imageDataBuffer","Uint8ClampedArray","rowI","colI","pos","imageData","createImageData","set","putImageData","stroke","categories","forEach","category","range","start","end","get","index","indexList","type","length","Promise","resolve","reject","count","window"],"mappings":"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","file":"cifar10-client.es5.js","sourcesContent":["\"use strict\";\r\n\r\n(() => {\r\n\r\n    class CIFAR10 {\r\n\r\n        static set (training, test) {\r\n            fetch(\"/set\", {method: \"Post\", body: JSON.stringify({training, test})})\r\n            .then(r => r.json())\r\n            .then(({dataCount}={}) => {\r\n                if (dataCount) {\r\n                    console.warn(`Not enough data (${dataCount}) for ${training} training and ${test} test items. Scaling down.`)\r\n                }\r\n            })\r\n        }\r\n\r\n        static reset () {\r\n            fetch(\"/reset\")\r\n        }\r\n\r\n        static render (data, context) {\r\n\r\n            const inputData = data.input.map(v => v*255)\r\n            const imageDataBuffer = new Uint8ClampedArray(32 * 32 * 4)\r\n\r\n            for (let rowI=0; rowI<32; rowI++) {\r\n                for (let colI=0; colI<32; colI++) {\r\n                    const pos = (rowI * 32 + colI) * 4\r\n                    imageDataBuffer[pos]   = inputData[rowI * 32 + colI]\r\n                    imageDataBuffer[pos+1] = inputData[rowI * 32 + colI + 1024]\r\n                    imageDataBuffer[pos+2] = inputData[rowI * 32 + colI + 2048]\r\n                    imageDataBuffer[pos+3] = 255\r\n                }\r\n            }\r\n\r\n            const imageData = context.createImageData(32, 32)\r\n            imageData.data.set(imageDataBuffer)\r\n            context.putImageData(imageData, 0, 0)\r\n            context.stroke()\r\n        }\r\n    }\r\n\r\n    CIFAR10.categories = [\"airplane\", \"automobile\", \"bird\", \"cat\", \"deer\", \"dog\", \"frog\", \"horse\", \"ship\", \"truck\"]\r\n\r\n    CIFAR10.categories.forEach(category => {\r\n        CIFAR10[category] = {\r\n            \r\n            range: (start, end) => fetch(\"/range\", {\r\n                method: \"Post\",\r\n                body: JSON.stringify({category, start, end})\r\n            }).then(r => r.json()),\r\n\r\n            training: {\r\n                get: ({index, indexList}={}) => fetch(\"/category.training.get\", {\r\n                    method: \"Post\", \r\n                    body: JSON.stringify({category, index, indexList, type: \"training\"})\r\n                }).then(r => r.json()),\r\n                length: () => {\r\n                    return new Promise((resolve, reject) => {\r\n                        fetch(\"/category.training.length\", {\r\n                            method: \"Post\",\r\n                            body: JSON.stringify({category})\r\n                        }).then(r => r.json())\r\n                        .then(({length}) => resolve(length))\r\n                    })\r\n                }\r\n            },\r\n            test: {\r\n                get: ({index, indexList}={}) => fetch(\"/category.training.get\", {\r\n                    method: \"Post\", \r\n                    body: JSON.stringify({category, index, indexList, type: \"test\"})\r\n                }).then(r => r.json()),\r\n                length: () => {\r\n                    return new Promise((resolve, reject) => {\r\n                        fetch(\"/category.test.length\", {\r\n                            method: \"Post\",\r\n                            body: JSON.stringify({category})\r\n                        }).then(r => r.json())\r\n                        .then(({length}) => resolve(length))\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    })\r\n\r\n    CIFAR10.training = {\r\n        get: count => {\r\n            return fetch(\"/training.get\", {method: \"Post\", body: JSON.stringify({count})})\r\n                .then(r => r.json())\r\n        },\r\n        length: () => {\r\n            return new Promise((resolve, reject) => {\r\n                fetch(\"/training.length\").then(r => r.json())\r\n                .then(({length}) => resolve(length))\r\n            })\r\n        }\r\n    }\r\n    CIFAR10.test = {\r\n        get: count => {\r\n            return fetch(\"/test.get\", {method: \"Post\", body: JSON.stringify({count})})\r\n                .then(r => r.json())\r\n        },\r\n        length: () => {\r\n            return new Promise((resolve, reject) => {\r\n                fetch(\"/test.length\").then(r => r.json())\r\n                .then(({length}) => resolve(length))\r\n            })\r\n        }\r\n    }\r\n\r\n    window.CIFAR10 = CIFAR10\r\n})()"]}