{"version":3,"sources":["../dev/cifar10.js"],"names":["fs","require","bp","shuffle","i","arr","length","j","Math","floor","random","x","indeces","training","test","getData","type","count","Promise","resolve","reject","outData","itemsPerCategory","parseInt","CIFAR10","categories","forEach","sliceStart","min","readIndexCounters","category","indecesToRead","slice","sort","push","get","bind","all","then","final","resolved","reduce","prev","curr","concat","index","Array","isArray","map","range","data","items","trainingSize","testSize","max","dataCount","console","warn","reset","totalLength","v","splice","Category","label","output","indexOf","statSync","dataPath","size","start","end","readStream","createReadStream","highWaterMark","on","chunk","close","input","from","d","p","c","module","exports","__dirname","testing","set","cifar10"],"mappings":"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","file":"cifar10.js","sourcesContent":["\"use strict\"\r\n\r\nconst fs = require(\"fs\")\r\nconst bp = require(\"babel-polyfill\")\r\n\r\nconst shuffle = arr => {\r\n    for (let i=arr.length; i; i--) {\r\n        const j = Math.floor(Math.random() * i)\r\n        const x = arr[i-1]\r\n        arr[i-1] = arr[j]\r\n        arr[j] = x\r\n    }\r\n}\r\n\r\nconst indeces = {\r\n    training: {},\r\n    test: {}\r\n}\r\n\r\nconst getData = (type, count) => {\r\n    return new Promise((resolve, reject) => {\r\n        const outData = []\r\n        const itemsPerCategory = Math.floor(parseInt(count)/10)\r\n\r\n        CIFAR10.categories.forEach(category => {\r\n\r\n            const sliceStart = Math.min(readIndexCounters[type][category]/10, CIFAR10[category][type].length) \r\n            let indecesToRead = indeces[type][category].slice(sliceStart, sliceStart+itemsPerCategory)\r\n\r\n            if (indecesToRead.length < (itemsPerCategory-1)) {\r\n                shuffle(indeces[type][category])\r\n                indecesToRead = [...indecesToRead, ...indeces[type][category].slice(0, itemsPerCategory - indecesToRead.length)]\r\n                readIndexCounters[type][category] = itemsPerCategory - indecesToRead.length\r\n            }\r\n\r\n            indecesToRead.sort()\r\n            outData.push(get.bind(CIFAR10[category], indecesToRead)())\r\n        })\r\n\r\n        Promise.all(outData).then(resolved => {\r\n            CIFAR10.categories.forEach(category => readIndexCounters[type][category] += itemsPerCategory*10)\r\n            const final = resolved.reduce((prev, curr) => prev.concat(curr) ,[])\r\n            shuffle(final)\r\n            resolve(final)\r\n        })\r\n    })\r\n}\r\n\r\n// Maybe move the array logic into range(), with index conditions. Quicker than opening new streams for each index?\r\n// But maybe only do it if the number of indeces is above, say ~5% of the total items, else just do it the current way\r\nfunction get (index) {\r\n    return new Promise(async (resolve, reject) => {\r\n        if (Array.isArray(index)) {\r\n            Promise.all(index.map(i => this.range(i))).then(data => resolve(data.map(items => items[0])))\r\n        } else {\r\n            const data = await this.range(index)\r\n            resolve(data[0])\r\n        }\r\n    })\r\n}\r\n\r\nclass CIFAR10 {\r\n\r\n    static set (trainingSize=50000, testSize=10000) {\r\n\r\n        trainingSize = Math.max(Math.floor(trainingSize/10)*10, 10)\r\n        testSize = Math.max(Math.floor(testSize/10)*10, 10)\r\n\r\n        if (trainingSize+testSize > this.dataCount) {\r\n            console.warn(`Not enough data (${this.dataCount}) for ${trainingSize} training and ${testSize} test items. Scaling down.`)\r\n            this.training.length = Math.floor((this.dataCount / (trainingSize+testSize)) * trainingSize/10)*10\r\n            this.test.length = Math.floor((this.dataCount / (trainingSize+testSize)) * testSize/10)*10\r\n\r\n        } else {\r\n            this.training.length = trainingSize\r\n            this.test.length = testSize\r\n        }\r\n\r\n        this.reset()\r\n\r\n        if (trainingSize+testSize > this.dataCount) {\r\n            return this.dataCount\r\n        }\r\n    }\r\n\r\n    static reset () {\r\n        this.categories.forEach(category => {\r\n\r\n            // Generate list of indeces for entire data set, either afresh, or appended to existing\r\n            indeces.training[category] = [...new Array(this[category].totalLength)].map((v,i) => i)\r\n            shuffle(indeces.training[category])\r\n\r\n            // Move some of those indeces into the test set\r\n            indeces.test[category] = indeces.training[category].splice(this.training.length/10, this.dataCount/10)\r\n\r\n            // Limit the indeces to the given .split() amount\r\n            this[category].training.length = this.training.length/10\r\n            this[category].test.length = this.test.length/10\r\n        })\r\n    }\r\n}\r\n\r\nclass Category {\r\n\r\n    constructor (label) {\r\n        this.label = label\r\n        this.output = [0,0,0,0,0,0,0,0,0,0]\r\n        this.output[CIFAR10.categories.indexOf(label)] = 1\r\n        this.totalLength = fs.statSync(`${CIFAR10.dataPath}/${this.label}.bin`).size / 3071\r\n        this.length = this.totalLength\r\n\r\n        this.training = {\r\n            length: 0, \r\n            get: index => {\r\n                index = index || index==0 ? index : Math.floor(Math.random()*this.training.length)\r\n                return get.bind(this, Array.isArray(index) ? index.map(i => indeces.training[label][i]) : index)()\r\n            }\r\n        }\r\n        this.test = {\r\n            length: 0,\r\n            get: index => {\r\n                index = index || index==0 ? index : Math.floor(Math.random()*this.test.length)\r\n                return get.bind(this, Array.isArray(index) ? index.map(i => indeces.test[label][i]) : index)()\r\n            }\r\n        }\r\n\r\n        this.get = index => {\r\n            index = index || index==0 ? index : Math.floor(Math.random()*(this.length-1))\r\n            return get.bind(this, Array.isArray(index) ? index.map(i => indeces.test[label][i]) : index)()\r\n        }\r\n    }\r\n\r\n    range (start=0, end) {\r\n        return new Promise((resolve, reject) => {\r\n            start = parseInt(start)\r\n            const data = []\r\n            const readStream = fs.createReadStream(`${CIFAR10.dataPath}/${this.label}.bin`, {\r\n                start: start * 3071, \r\n                end: (parseInt(end) || (start+1)) * 3071,\r\n                highWaterMark: 3072\r\n            })\r\n            readStream.on(\"data\", chunk => data.push(chunk)) \r\n            readStream.on(\"end\", () => {\r\n                readStream.close()\r\n                resolve(data.map(d => {\r\n                    return {\r\n                        input: Array.from(d).map(v => v/255),\r\n                        output: this.output\r\n                    }\r\n                }))\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\nCIFAR10.categories = [\"airplane\", \"automobile\", \"bird\", \"cat\", \"deer\", \"dog\", \"frog\", \"horse\", \"ship\", \"truck\"]\r\nCIFAR10.training = {get: getData.bind(null, \"training\")}\r\nCIFAR10.test = {get: getData.bind(null, \"test\")}\r\nCIFAR10.dataCount = 60000\r\n\r\nconst readIndexCounters = {\r\n    training: CIFAR10.categories.reduce((p,c) => {p[c] = 0; return p}, {}),\r\n    test: CIFAR10.categories.reduce((p,c) => {p[c] = 0; return p}, {})\r\n}\r\n\r\nmodule.exports = ({dataPath=__dirname, testing=false}={}) => {\r\n\r\n    CIFAR10.dataPath = dataPath\r\n    CIFAR10.categories.forEach(category => CIFAR10[category] = new Category(category))\r\n    CIFAR10.set(50000,10000)\r\n\r\n    return testing ? {\r\n        testing: {shuffle, get, getData, indeces},\r\n        cifar10: CIFAR10\r\n    } : CIFAR10\r\n}"]}